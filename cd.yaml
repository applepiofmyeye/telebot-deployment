name: Deploy Telegram Bot

on:
  workflow_call:
    inputs:
      # CONTAINER_NAME:
      #   description: The name of the container in the ECS task definition. Convention is to use the bot name.
      #   required: true
      #   type: string
      # ECS_SERVICE:
      #   description: The name of your bot will be used as the ECS service name.
      BOT_NAME:
        description: The name of the bot to deploy in kebab-case format.
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hosting-test
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v2
        with:
          task-definition: ecs-task-definition.json
          container-name: ${{ inputs.BOT_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.BOT_NAME }}
          cluster: hosting-bot-cluster
          wait-for-service-stability: true

      - name: Notify deployment success
        run: echo "Deployment successful!"

      - name: Clean up old images
        run: |
          echo "Cleaning up old images..."
          aws ecr list-images --repository-name melosdownloaderbot --query 'imageIds[?imageTag!=`latest`]' --output json | jq -c '.[]' | while read -r image; do
            aws ecr batch-delete-image --repository-name melosdownloaderbot --image-ids "$image"
          done
          echo "Old images cleaned up."

      - name: Notify cleanup success
        run: echo "Cleanup of old images successful!"

      - name: Notify deployment completion
        run: echo "Deployment and cleanup completed successfully!"

      - name: Notify failure
        if: failure()
        run: echo "Deployment or cleanup failed!"

      - name: Notify workflow completion
        run: echo "Workflow completed!"
